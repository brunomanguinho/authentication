require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const ejs = require("ejs");
const mongoose = require("mongoose");

//using passport, cookies and sessions - level 5 of security
//****STUDY THESE PACKAGES DOCUMENTATIONS!!!!
const session = require("express-session");
const passport = require("passport");
const passportLocalMongoose = require("passport-local-mongoose");

//brcypt with hashing and salting - level 4 of security
// const bcrypt = require("bcrypt");
// const saltRounds = 10;

//md5-encryption - Level 3 of seecurity
//const md5 = require("md5");

//mongoose-encryption - Level 2 of security
//const encrypt = require("mongoose-encryption");

const app = express();
app.use(bodyParser.urlencoded({extended: true}));
app.use(express.static("public"));
app.set("view engine", "ejs");

//LEVEL 5: using session - its important to place these code right after the using and settings for the app &
//                         before the connection with mongoose

app.use(session({
  secret: "This is a secret",
  resave: false,
  saveUninitialized: true,
}));

app.use(passport.initialize());
app.use(passport.session());

// /LEVEL 5

mongoose.connect("mongodb://localhost:27017/userDB", {useNewUrlParser: true});

const userSchema = new mongoose.Schema({
  email: String,
  password: String
});

//LEVEL 5 - USING SESSIONS ON MONGOOSE
userSchema.plugin(passportLocalMongoose);

const secret = process.env.SECRET;

//mongoose-encryption - Level 2 of security
//userSchema.plugin(encrypt, {secret: secret, encryptedFields: ["password"]});

const User = new mongoose.model("User", userSchema);

passport.use(User.createStrategy());

passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());


app.get("/", function(req, res){
  res.render("home");
});

app.get("/register", function(req, res){
  res.render("register");
});

app.get("/login", function(req, res){
  res.render("login");
});

//password geneteated with level 5 of security via cookies & sessions using passport
app.get("/secrets", function(req, res){
  if (req.isAuthenticated()){
    res.render("secrets");
  } else {
    res.redirect("/login");
  }
});

app.get("/logout", function(req, res){
  req.logout();
  res.redirect("/");
})

app.post("/register", function(req, res){
  User.register({username: req.body.username}, req.body.password, function(err, user){
    if (err){
      console.log(err);
      res.redirect("/register");
    } else{
      passport.authenticate("local")(req, res, function(){
        res.redirect("/secrets");
      });
    }
  });
});

//login with level 5 of security via cookies & sessions using passport
app.post("/login", function(req, res){
  const user = new User({
    username: req.body.username,
    password: req.body.password
  });

  req.login(user, function(err){
    if (err){
      console.log(err);
    } else{
      passport.authenticate("local")(req, res, function(){
        res.redirect("/secrets");
      })
    }
  });

});


//password generated by bcrypt - level 4 of security
// app.post("/register", function(req, res){
//
//   bcrypt.hash(req.body.password, saltRounds, function(err, hash){
//     const user = new User({
//       email: req.body.username,
//       password: hash
//     });
//
//     user.save(function(err){
//       if (err){
//         console.log(err);
//       } else {
//           res.render("secrets");
//       }
//     });
//
//   });
// });

//login with bcrypt - level 4 of security
// app.post("/login", function(req, res){
//   const username = req.body.username;
//   const password = req.body.password;
//
//   User.findOne({email: username}, function(err, foundUser){
//     if (err){
//       console.log(err);
//     } else{
//       console.log(this.email);
//       if (foundUser) {
//         bcrypt.compare(password, foundUser.password, function(err, result){
//           if (result === true){
//               res.render("secrets");
//           }else console.log(foundUser);
//         })
//       }
//     }
//   })
// });



//password generated by md5 - level 3 of security
// app.post("/register", function(req, res){
//   const user = new User({
//     email: req.body.username,
//     password: md5(req.body.password)
//   });
//
//   user.save(function(err){
//     if (err){
//       console.log(err);
//     } else {
//         res.render("secrets");
//     }
//   });
// });

//login with md5 - level 3 of security
// app.post("/login", function(req, res){
//   const username = req.body.username;
//   const password = md5(req.body.password);
//
//   User.findOne({email: username}, function(err, foundUser){
//     if (err){
//       console.log(err);
//     } else{
//       console.log(this.email);
//       if ( (foundUser) && (foundUser.password === password) ){
//         res.render("secrets")
//       }
//     }
//   })
// });






app.listen(3000, function(){
  console.log("Server is listening on port 3000...");
})
